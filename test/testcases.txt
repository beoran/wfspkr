# The module must be included loaded and for running these test cases
require 'poker'
include Poker
  
######################################
# 1 Ranks and suits as objects
######################################
# Program text

  puts Rank::RANKS
  puts Suit::SUITS

# Expected output
A
2
3
4
5
6
7
8
9
T
J
Q
K
A
♥
♠
♦
♣
### 

######################################
# 2 Cards as objects
######################################
# Program text
  sa = Card.new(:Spades, :Ace)
  c2 = Card.new(:Clubs, 2) 
  puts sa 
  puts c2
  puts sa.to_s
  puts sa.dup

# Expected output
♠A                                                            
♣2                                                            
♠A                                                            
♠A
###

######################################
# 3 Setting cards as wildcards
######################################
# Program text
  sa = Card.new(:Spades, :Ace)
  c2 = Card.new(:Clubs, 2) 
  Wildcards.wild(Card.to_card('s2'), Card.to_card('c2'), 
                 Card.to_card('d2'), Card.to_card('h2'))
  puts  c2.wild?
  puts  sa.wild?
# Expected output
true                                                          
false
###

######################################
# 4 Working with the deck
######################################
# Program text
  d = Deck.new
  puts d.to_s
  d.shuffle!
  puts d.to_s
  h = Hand.new(d.deal!(5))
  puts d.to_s
# Expected output 
♥2 ♥3 ♥4 ♥5 ♥6 ♥7 ♥8 ♥9 ♥T ♥J ♥Q ♥K ♥A                        
♠2 ♠3 ♠4 ♠5 ♠6 ♠7 ♠8 ♠9 ♠T ♠J ♠Q ♠K ♠A                        
♦2 ♦3 ♦4 ♦5 ♦6 ♦7 ♦8 ♦9 ♦T ♦J ♦Q ♦K ♦A                        
♣2 ♣3 ♣4 ♣5 ♣6 ♣7 ♣8 ♣9 ♣T ♣J ♣Q ♣K ♣A                        
♣J ♣K ♠3 ♠8 ♥J ♦9 ♥A ♥2 ♣A ♣9 ♥Q ♦T ♣2                        
♦A ♦8 ♠J ♠T ♥7 ♦4 ♦3 ♥K ♦Q ♦2 ♣Q ♣6 ♦7                        
♣4 ♥6 ♠4 ♦6 ♥4 ♠9 ♣5 ♥5 ♥8 ♠2 ♠5 ♠K ♣T                        
♣8 ♦5 ♥T ♠Q ♠7 ♥9 ♦K ♦J ♥3 ♣3 ♣7 ♠A ♠6                        
♦9 ♥A ♥2 ♣A ♣9 ♥Q ♦T ♣2 ♦A ♦8 ♠J ♠T ♥7                        
♦4 ♦3 ♥K ♦Q ♦2 ♣Q ♣6 ♦7 ♣4 ♥6 ♠4 ♦6 ♥4                        
♠9 ♣5 ♥5 ♥8 ♠2 ♠5 ♠K ♣T ♣8 ♦5 ♥T ♠Q ♠7                        
♥9 ♦K ♦J ♥3 ♣3 ♣7 ♠A ♠6                                       
♣J ♣K ♠3 ♠8 ♥J
# Note: the cards above may be different, as the deck is shuffled differently
# Only the first 52 cards should always be in the same order.
###


######################################
# 6 Creating hands easily
######################################
# Program text

  h2 = Hand.to_hand('♥2 ♠4 ♣4 ♦4 ♥4')
  
# Expected output
♥2 ♠4 ♣4 ♦4 ♥4                                                
###

######################################
# 6 Working with hands and wildcards
######################################
# Program text  

  # First, make all twos wild
  Wildcards.wild(Card.to_card('s2'), Card.to_card('♣2'), 
                 Card.to_card('d2'), Card.to_card('h2'))  
  # To_hand generats a hand based upon a short descrption.		 
  h2 = Hand.to_hand('♥2 ♠4 ♣4 ♦4 ♥4')
  puts h2.to_s
  puts  h2.five_of_a_kind?
  puts  h2.four_of_a_kind?    
  # Now, make all sixes wild 
  Wildcards.wild(Card.to_card('s6'), Card.to_card('c6'), 
                 Card.to_card('d6'), Card.to_card('h6'))
  puts  h2.five_of_a_kind?
  # Should be false now, because no more 2 wildcards
  puts  h2.four_of_a_kind?
  # Should still be true
  
# Expected output   
true
true
false
true
###

######################################
# 7 Checking for combinations.
######################################
# Program text
  # Make all sixes wild 
  Wildcards.wild(Card.to_card('s6'), Card.to_card('c6'), 
                 Card.to_card('d6'), Card.to_card('h6'))

  h3 = Hand.to_hand('♥2 ♠4 ♣4 ♦4 ♥3')  
  puts h3.to_s
  # Should be true for three of a kind and false for four of a kind
  puts  h3.three_of_a_kind?
  puts  h3.four_of_a_kind?
  
  h4 = Hand.to_hand('♥2 ♠4 ♣4 ♦5 ♥3')
  puts h4.to_s
  # Should be true for pair of a kind and false for three of a kind
  puts  h4.three_of_a_kind?
  puts  h4.pair?
  
  h5 = Hand.to_hand('♥2 ♠4 ♣4 ♦5 ♥5')
  # Should be true for both pair and two pair
  puts h5.to_s
  puts  h5.two_pair?
  puts  h5.pair?

  h6 = Hand.to_hand('♥2 ♠4 ♣8 ♦5 ♥Q')  
  puts h6.to_s
  # Should be false for all cases
  puts  h6.two_pair?
  puts  h6.pair?
  puts  h6.full_house?
  puts  h6.straight?
  puts  h6.flush?

  h7 = Hand.to_hand('♥7 ♥8 ♥9 ♥T ♥J')
  puts h7.to_s
  # Should be true for all three straight, flush and straight flush
  puts  h7.straight?
  puts  h7.flush?
  puts  h7.straight_flush?
  
  h8 = Hand.to_hand('♥2 ♠2 ♣2 ♦Q ♥Q')
  puts h8.to_s
  # Should be true for two pairn, pair, full house, but false for 
  # four of a kind
  puts  h8.two_pair?
  puts  h8.pair?
  puts  h8.full_house?
  puts  h8.four_of_a_kind?

# Expected output
♥2 ♠4 ♣4 ♦4 ♥3                                                
true                                                          
false                                                         
♥2 ♠4 ♣4 ♦5 ♥3                                                
false                                                         
true                                                          
♥2 ♠4 ♣4 ♦5 ♥5                                                
true                                                          
true                                                          
♥2 ♠4 ♣8 ♦5 ♥Q                                                
false                                                         
false                                                         
false                                                         
false                                                         
false                                                         
♥7 ♥8 ♥9 ♥T ♥J                                                
true                                                          
true                                                          
true                                                          
♥2 ♠2 ♣2 ♦Q ♥Q
true
true
true
false
###  
  
######################################
# 8 Comparing hands individually
######################################
# Program text  
  
  h7 = Hand.to_hand('♥7 ♥8 ♥9 ♥T ♥J')
  h8 = Hand.to_hand('♥2 ♠2 ♣2 ♦Q ♥Q')
  puts h8 <=> h7
  
# Expected output
-1
###

######################################
# 9 Comparing hands by sorting (1)
######################################
# Program text  
  # Highest valued hand will apear last
  # in the sorted array
  # Straight flushes, low and high
  h9  = Hand.to_hand('♦A ♦2 ♦3 ♦4 ♦5')
  h10 = Hand.to_hand('♥A ♥K ♥Q ♥J ♥10')
  puts [h9, h10].sort
  puts "---"
  # pairs and two pairs
  h11 = Hand.to_hand('♦10 ♥10 ♦3 ♦5 ♦7')
  h12 = Hand.to_hand('♦K ♥K ♥Q ♥J ♥10')
  h13 = Hand.to_hand('♣K ♠K ♥J ♥J ♥A')
  puts [h11, h12, h13].sort
  puts "---"
  # Two pairs
  h14 = Hand.to_hand('♦K ♥K ♥Q ♦Q ♥10')
  h15 = Hand.to_hand('♣K ♠K ♣J ♠J ♥A')
  h16 = Hand.to_hand('♣K ♠K ♣J ♠J ♥10')
  puts [h14, h15, h16].sort
  puts "---" 
  # Three of a kinds 
  h17 = Hand.to_hand('♦K ♥K ♥K ♦Q ♥10')
  h18 = Hand.to_hand('♣K ♠K ♣K ♠J ♥A')  
  puts [h17, h18].sort
# Expected output
###
♥2 ♠4 ♣8 ♦5 ♥Q
♥2 ♠2 ♣2 ♦Q ♥Q
♥7 ♥8 ♥9 ♥T ♥J
---
♦A ♦2 ♦3 ♦4 ♦5
♥A ♥K ♥Q ♥J ♥T
---
♦T ♥T ♦3 ♦5 ♦7
♦K ♥K ♥Q ♥J ♥T
♣K ♠K ♥J ♥J ♥A
---
♣K ♠K ♣J ♠J ♥T
♣K ♠K ♣J ♠J ♥A
♦K ♥K ♥Q ♦Q ♥T
---
♦K ♥K ♥K ♦Q ♥T
♣K ♠K ♣K ♠J ♥A
###

######################################
# 10 Comparing hands by sorting (2)
######################################
# Program text  
  # Highest valued hand will apear last
  # in the sorted array
  # Flushes
  h19 = Hand.to_hand('♦K ♦J ♦10 ♦8 ♦6')
  h20 = Hand.to_hand('♣K ♣J ♣10 ♣8 ♣A')  
  puts [h19, h20].sort
  puts "---"
  # Straight flushes
  h21 = Hand.to_hand('♦A ♦K ♦Q ♦J ♦10')
  h22 = Hand.to_hand('♣K ♣Q ♣J ♣10 ♣9')  
  puts [h21, h22].sort
  puts "---"
  # Four of a kind with and without wildcards
  h23 = Hand.to_hand('♦K ♥K ♣K ♠K ♥6')
  h24 = Hand.to_hand('♦Q ♥Q ♣Q ♠Q ♠6')
  h25 = Hand.to_hand('♦K ♥K ♣K ♠K ♥3')
  h26 = Hand.to_hand('♦Q ♥Q ♣Q ♠Q ♠3')  
  puts [h23, h24, h25, h26].sort  
  puts "---"
  # Full houses
  h27 = Hand.to_hand('♦K ♥K ♣K ♠A ♥A')
  h28 = Hand.to_hand('♦K ♥K ♣K ♥Q ♠Q')
  puts [h27, h28].sort  
  puts "---"
  # Two pairs again
  h27 = Hand.to_hand('♦K ♥K ♣7 ♠A ♥A')
  h28 = Hand.to_hand('♣K ♠K ♣5 ♥Q ♠Q')
  puts [h27, h28].sort 
  
# Expected output
♣K ♣Q ♣J ♣T ♣9
♦A ♦K ♦Q ♦J ♦T
---
♦Q ♥Q ♣Q ♠Q ♠3
♦K ♥K ♣K ♠K ♥3
♦Q ♥Q ♣Q ♠Q ♠6
♦K ♥K ♣K ♠K ♥6
---
♦K ♥K ♣K ♥Q ♠Q
♦K ♥K ♣K ♠A ♥A
---
♣K ♠K ♣5 ♥Q ♠Q
♦K ♥K ♣7 ♠A ♥A
###

